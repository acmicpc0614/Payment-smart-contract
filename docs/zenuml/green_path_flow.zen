// Mysterium Network Payments sequence diagram
// 
// <<<<<<<<<< Green Path Diagram >>>>>>>>>>>
// 

Consumer
Provider
Accountant


// Register Accountant and his type on BC and staking some coins
Accountant -> BlockChain: RegisterAccountant(accountantOperatorAddress, type)

// Consumer register MN identity on BC paying for identity and initial TopUP
Consumer -> BlockChain: RegisterIdentity(ConsumerID, AccountantID)
Consumer -> BlockChain: TopUpChannel(amount)

// Provider register MN identity BC paying for identity
Provider -> BlockChain: RegisterIdentity(ProviderID, AccountantID)

// Provider can lend some funds to Accountant so he have to topup channel imidiatelly.
// Alternatively if provider don't want to lend, then he can ask for collateral from accountant, and agree on bigger fee.
Provider.OpenIncomingChannel(stakeAmount) {
  if (stakeAmount > 0) {
    channelState = BlockChain.LendFunds(AccountantId, stakeAmount)
    ok = Accountant.Inform(channelState) {
      ok = BlockChain.CheckChannelState()
    }
  } else {
    fee = Accountant.AskForCollateral(wantedAmount)
    ok = Accountant.AggreeOnFee(fee) {
      BlockChain.TopUpChannel(channelAddress, wantedAmount)
    }
  }
}

// Pay for services
// Multiple promisses can be issued to Provider before Provider calls to Accountant
// BeneficieryAddress is provided by provider in Proposal
// extraData { ConsumerID, ProviderID, ProposalID, R }
// hashlock = hash(R) // ensures that peer will exchange tx
// agreementID == hash(consumerID, providerID)
// amount is growing within a scope of agreementID
// agreementID sovles ambiguous accounting decision when PP CP C P (pools) are used
Consumer.payForServices {
  balance = Provider.IssuePromise(PayerID, BeneficiaryAddress, amount, hashlock, extraData, aggreementID, Csig)
  balance = Provider.IssuePromise(PayerID, BeneficiaryAddress, amount, hashlock, extraData, aggreementID, Csig)
  balance = Provider.IssuePromise(PayerID, BeneficiaryAddress, amount, hashlock, extraData, aggreementID, Csig) {
    // Accountant exchange consumer's to him into his prommise for provider
    // consumerPromise: PayerID, BeneficieryAddress, PYsig, amount, hashlock, extraDataHash
    // accoutantPromise: BeneficieryAddress, hashlock, totalProviderAmount, Asig
    accoutantPromise = Accountant.ReqPromiseExchange(consumerPromise) 
    ok = Accountant.RevealingSecret(R)
  }
  balance = Provider.IssuePromise(PayerID, BeneficiaryAddress, PYsig, amount, hashlock, extraData, aggreementID)
}

// Settle / withdrawal funds (same for provider and accountant)
Provider -> BlockChain: SettlePromise(accoutantPromise, R)
Accountant -> BlockChain: SettlePromise(consumerPromise, R)

// Consumer and Accountant may decide to empty channel (even with older state), but with timelock
// Hub's timelock is always shorter than Consumer's
channelState = Consumer.ClosePaymentChannel {
    ok = BlockChain.initialiseExit(CAchannelId, Csig)

    // Wait for X blocks, when Accountant can provide newest promise 
    // or initialise exit from Provider's channel
    if (R != unknown) {
      Accountant -> BlockChain: SettlePromise(consumerPromise, R)
    } else {
      Accountant -> BlockChain: initialiseExit(APchannelId, Asig)
      
      // Wait for X blocks, when Provider can provide newest promise
      if (newerPromise != null) {
        Provider -> BlockChain: SettlePromise(accountantPromise, R)
        Accountant -> BlockChain: SettlePromise(consumerPromise, R)
      }
    }

    // When X blocks pass
    // Funds will be send exiting party given account
    // tx can be send by anyone
    Anyone -> BlockChain: FinaliseExit()
}
