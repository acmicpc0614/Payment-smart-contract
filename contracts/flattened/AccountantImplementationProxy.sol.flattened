
// File: contracts/Config.sol

pragma solidity >=0.5.12 <0.6.0;

/*
    Stores config data of forwarder so it will be same for all proxies.
*/
contract Config {
    address public owner;

    function getConfig(bytes32 slot) public view returns (bytes32 res) {
        assembly {
            res := sload(slot)
        }
    }

    function getAddress(bytes32 slot) public view returns(address res)  {
        assembly {
            res := sload(slot)
        }
    }

    function getUint(bytes32 slot) public view returns(uint256 res) {
        assembly {
            res := sload(slot)
        }
    }

    function addConfig(bytes32 slot, bytes32 value) public {
        require (msg.sender == owner);
        require (slot != 0x0);  // Don't allow to set owner using addConfig function to avoid not intendet behaviour.
        assembly {
            sstore(slot, value)
        }
    }

    /* Function allows to set new owner.
       During first call (when owner is not yet set) anyone can set it. Later only current owner can set new one.
     */
    function setOwner(address _owner) public {
        require (msg.sender == owner || owner == address(0x0));
        owner = _owner;
    }
}

// File: contracts/AccountantImplementationProxy.sol

pragma solidity >=0.5.12 <0.6.0;


contract AccountantImplementationProxy {

    // At this address we're saving persistent state of our forwarder
    address constant configAddress = 0xBEbeBeBEbeBebeBeBEBEbebEBeBeBebeBeBebebe;

    // keccak256('accountant implementation')
    bytes32 constant IMPLEMENTATION = 0xe6906d4b6048dd18329c27945d05f766dd19b003dc60f82fd4037c490ee55be0;

    function () external payable {
        address _target = Config(configAddress).getAddress(IMPLEMENTATION);
        assembly {
            let ptr := mload(0x40)
            calldatacopy(ptr, 0, calldatasize)
            let success := delegatecall(sub(gas, 10000), _target, ptr, calldatasize, 0, 0)
            let retSz := returndatasize
            returndatacopy(ptr, 0, retSz)

            switch success
            case 0 { revert(ptr, retSz) }
            default { return(ptr, retSz) }
        }
    }

}
