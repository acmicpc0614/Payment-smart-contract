
// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol

pragma solidity ^0.5.0;

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * (.note) This call _does not revert_ if the signature is invalid, or
     * if the signer is otherwise unable to be retrieved. In those scenarios,
     * the zero address is returned.
     *
     * (.warning) `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise)
     * be too long), and then calling `toEthSignedMessageHash` on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        // Check the signature length
        if (signature.length != 65) {
            return (address(0));
        }

        // Divide the signature in r, s and v variables
        bytes32 r;
        bytes32 s;
        uint8 v;

        // ecrecover takes the signature parameters, and the only way to get them
        // currently is to use assembly.
        // solhint-disable-next-line no-inline-assembly
        assembly {
            r := mload(add(signature, 0x20))
            s := mload(add(signature, 0x40))
            v := byte(0, mload(add(signature, 0x60)))
        }

        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return address(0);
        }

        if (v != 27 && v != 28) {
            return address(0);
        }

        // If the signature is valid (and not malleable), return the signer address
        return ecrecover(hash, v, r, s);
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * replicates the behavior of the
     * [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)
     * JSON-RPC method.
     *
     * See `recover`.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}

// File: openzeppelin-solidity/contracts/math/SafeMath.sol

pragma solidity ^0.5.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}

// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol

pragma solidity ^0.5.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
 * the optional functions; to access them see `ERC20Detailed`.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through `transferFrom`. This is
     * zero by default.
     *
     * This value changes when `approve` or `transferFrom` are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * > Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an `Approval` event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a `Transfer` event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to `approve`. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: openzeppelin-solidity/contracts/ownership/Ownable.sol

pragma solidity ^0.5.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be aplied to your functions to restrict their use to
 * the owner.
 */
contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () internal {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * > Note: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

// File: contracts/FundsRecovery.sol

pragma solidity ^0.5.8;



contract FundsRecovery is Ownable {
    address payable internal fundsDestination;
    IERC20 public token;

    event DestinationChanged(address indexed previousDestination, address indexed newDestination);

    /**
     * Setting new destination of funds recovery.
     */
    function setFundsDestination(address payable _newDestination) public onlyOwner {
        require(_newDestination != address(0));
        emit DestinationChanged(fundsDestination, _newDestination);
        fundsDestination = _newDestination;
    }

    /**
     * Getting funds destination address.
     */
    function getFundsDestination() public view returns (address) {
        return fundsDestination;
    }

    /**
     * Possibility to recover funds in case they were sent to this address before smart contract deployment
     */
    function claimEthers() public {
        require(fundsDestination != address(0));
        fundsDestination.transfer(address(this).balance);
    }

    /**
       Transfers selected tokens into owner address.
    */
    // TODO add reentrancy protection
    function claimTokens(address _token) public {
        require(fundsDestination != address(0));
        require(_token != address(token), "native token funds can't be recovered");
        uint256 _amount = IERC20(_token).balanceOf(address(this));
        IERC20(_token).transfer(fundsDestination, _amount);
    }
}

// File: contracts/AccountantImplementation.sol

pragma solidity ^0.5.8;





interface IdentityRegistry {
    function isRegistered(address _identityHash) external view returns (bool);
}

// Uni-directional settle based accountant
contract AccountantImplementation is FundsRecovery {
    using ECDSA for bytes32;
    using SafeMath for uint256;

    string constant OPENCHANNEL_PREFIX = "Open channel request";
    string constant UPDATE_PREFIX = "Update channel balance";
    string constant LOAN_RETURN_PREFIX = "Load return request";
    string constant RESET_LOAN_RETURN_PREFIX = "Reset loan return request";
    string constant WITHDRAW_PREFIX = "Withdraw request";
    uint256 constant DELAY_BLOCKS = 18000;  // +/- 3 days

    IdentityRegistry internal registry;
    address internal operator;
    uint256 public timelock;               // block number after which exit can be finalised
    uint256 internal lockedFunds;
    uint256 internal totalLoan;
    uint256 internal lastUsedNonce;        // nonce used to protect signature based calls from repply attack

    struct Channel {
        address beneficiary;        // address where funds will be send
        uint256 balance;            // amount available to settle
        uint256 settled;            // total amount already settled by provider
        uint256 loan;               // amount lended by party to accountant
        uint256 loanTimelock;       // block number after which exit can be finalized
        uint256 lastUsedNonce;      // last known nonce, is used to protect signature based calls from repply attack
    }
    mapping(bytes32 => Channel) public channels;

    function getOperator() public view returns (address) {
        return operator;
    }

    function getChannelId(address _party) public view returns (bytes32) {
        return keccak256(abi.encodePacked(_party, address(this)));
    }

    function getRegistry() public view returns (address) {
        return address(registry);
    }

    event ChannelOpened(bytes32 channelId, uint256 initialBalance);
    event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 amount, uint256 newBalance);
    event NewLoan(bytes32 channelId, uint256 loadAmount);
    event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled);
    event LoanReturnRequested(bytes32 channelId, uint256 timelock);
    event LoanReturnRequestInvalidated(bytes32 channelId);
    event LoanReturned(bytes32 channelId, address beneficiary, uint256 amount);
    event ChannelBeneficiaryChanged(bytes32 _channelId, address _newBeneficiary);
    event FundsWithdrawned(uint256 amount, address beneficiary);

    /*
      ------------------------------------------- SETUP -------------------------------------------
    */

    // Because of proxy pattern this function is used insted of constructor.
    // Have to be called right after proxy deployment.
    function initialize(address _token, address _operator) public {
        require(!isInitialized(), "have to be not initialized");
        require(_operator != address(0), "operator have to be set");
        require(_token != address(0), "token can't be deployd into zero address");

        token = IERC20(_token);
        registry = IdentityRegistry(msg.sender);
        operator = _operator;
    }

    function isInitialized() public view returns (bool) {
        return operator != address(0);
    }

    /*
      -------------------------------------- MAIN FUNCTIONALITY -----------------------------------
    */

    // Open incomming payments (also known as provider) channel.
    function openChannel(address _party, address _beneficiary, uint256 _amountToLend) public {
        require(msg.sender == address(registry), "only registry can open channels");

        // channel ID is keccak(identityHash, accountantID)
        bytes32 _channelId = keccak256(abi.encodePacked(_party, address(this)));
        require(!isOpened(_channelId), "channel should be not opened yet");

        channels[_channelId].beneficiary = _beneficiary;
        channels[_channelId].balance = _amountToLend;

        // During opening new channel user can lend some funds to be guaranteed on channels size
        if (_amountToLend > 0) {
            require(token.transferFrom(msg.sender, address(this), _amountToLend), "token transfer should succeed");

            lockedFunds = lockedFunds.add(_amountToLend);            
            channels[_channelId].loan = _amountToLend;
            totalLoan = totalLoan.add(_amountToLend);

            emit NewLoan(_channelId, _amountToLend);
        }

        emit ChannelOpened(_channelId, _amountToLend);
    }

    // Settle promise
    // _lock is random number generated by receiver used in HTLC
    function settlePromise(bytes32 _channelId, uint256 _amount, uint256 _fee, bytes32 _lock, bytes memory _signature) public {
        Channel storage _channel = channels[_channelId];
        require(_channel.beneficiary != address(0), "channel should exist");

        bytes32 _hashlock = keccak256(abi.encodePacked(_lock));
        address _signer = keccak256(abi.encodePacked(_channelId, _amount, _fee, _hashlock)).recover(_signature);
        require(_signer == operator, "have to be signed by channel operator");

        // Calculate amount of tokens to be claimed.
        uint256 _unpaidAmount = _amount.sub(_channel.settled);
        require(_unpaidAmount > 0, "amount to settle should be greater that already settled");

        // If signer has less tokens than asked to transfer, we can transfer as much as he has already
        // and rest tokens can be transferred via same promise but in another tx 
        // when signer will top up channel balance.
        uint256 _currentBalance = _channel.balance;
        if (_unpaidAmount > _currentBalance) {
            _unpaidAmount = _currentBalance;
        }

        // Increase already paid amount
        _channel.settled = _channel.settled.add(_unpaidAmount);

        // Transfer tokens and decrease balance
        token.transfer(_channel.beneficiary, _unpaidAmount.sub(_fee));
        _channel.balance = _channel.balance.sub(_unpaidAmount);
        lockedFunds = lockedFunds.sub(_unpaidAmount);

        // Pay fee
        if (_fee > 0) {
            token.transfer(msg.sender, _fee);
        }

        emit PromiseSettled(_channelId, _channel.beneficiary, _unpaidAmount, _channel.settled);
    }

    // Updating collatered to channel amount - executed by operator
    // TODO accountant should be able to decrease only with timelock
    function updateChannelBalance(bytes32 _channelId, uint256 _nonce, uint256 _newBalance, bytes memory _signature) public {
        require(isOpened(_channelId), "channel have to be opened");
        require(_nonce > lastUsedNonce, "nonce have to be bigger than already used");
        require(_newBalance >= channels[_channelId].loan, "balance can't be less than loan amount");

        if (msg.sender != operator) {
            address _signer = keccak256(abi.encodePacked(UPDATE_PREFIX, _channelId, _nonce, _newBalance)).recover(_signature);
            require(_signer == operator, "have to be signed by operator");
        }

        __channelRebalance(_channelId, _newBalance);
        lastUsedNonce = _nonce;
    }

    // Possibility to increase channel ballance without operator's signature (up to lended amount)
    // TODO should not allow rebalance if there is loan return request (`_channel.loanTimelock != 0`)
    function rebalanceChannel(bytes32 _channelId) public {
        uint256 _newBalance = channels[_channelId].loan;
        require(_newBalance > channels[_channelId].balance, "new balance should be bigger that current");

        __channelRebalance(_channelId, _newBalance);
    }

    function __channelRebalance(bytes32 _channelId, uint256 _newBalance) internal {
        Channel storage _channel = channels[_channelId];
        uint256 diff;

        if (_newBalance > _channel.balance) {
            diff = _newBalance.sub(_channel.balance);
            lockedFunds = lockedFunds.add(diff);
            require(token.balanceOf(address(this)) >= lockedFunds, "accountant should have enought funds");
        } else {
            diff = _channel.balance.sub(_newBalance);
            lockedFunds = lockedFunds.sub(diff);
        }

        _channel.balance = _newBalance;

        emit ChannelBalanceUpdated(_channelId, diff, _newBalance);
    }

    function withdraw(address _beneficiary, uint256 _amount, uint256 _nonce, bytes memory _signature) public {
        require(_nonce > lastUsedNonce, "nonce have to be bigger than already used");

        // If transaction sent not by operator signature must be verified
        if (msg.sender != operator) {
            address _signer = keccak256(abi.encodePacked(WITHDRAW_PREFIX, _beneficiary, _amount, _nonce)).recover(_signature);
            require(_signer == operator, "have to be signed by operator");
        }

        // Accountants can't withdraw locked in channel funds and funds lended to him
        uint256 _possibleAmountToTransfer = token.balanceOf(address(this)).sub(max(lockedFunds, totalLoan));
        require(_possibleAmountToTransfer >= _amount, "should be enough funds available to withdraw");

        token.transfer(_beneficiary, _amount);

        emit FundsWithdrawned(_amount, _beneficiary);
    }

    /*
      -------------------------------------- LOAN MANAGEMENT --------------------------------------
    */

    // Anyone can increase channel's capacity by lending more for accountant
    function increaseLoan(bytes32 _channelId, uint256 _amount) public {
        require(isOpened(_channelId), "channel have to be opened");
        Channel storage _channel = channels[_channelId];

        require(token.transferFrom(msg.sender, address(this), _amount), "transfer have to be successfull");
        _channel.loan = _channel.loan.add(_amount);

        __channelRebalance(_channelId, _channel.loan);
        totalLoan = totalLoan.add(_amount);

        emit NewLoan(_channelId, _amount);
    } 

    // TODO add possibility to decrease loan instead of withdrawing all 
    function requestLoanReturn(address _party, uint256 _nonce, bytes memory _signature) public {
        bytes32 _channelId = getChannelId(_party);
        Channel storage _channel = channels[_channelId];

        uint256 _timelock = getTimelock();  // block number until which to wait

        require(_channel.loan > 0 && _channel.loanTimelock == 0, "loan return can be requested only if there are no open requests");
        require(_nonce > _channel.lastUsedNonce, "nonce have to be bigger than already used");

        if(msg.sender != _party) {
            address _signer = keccak256(abi.encodePacked(LOAN_RETURN_PREFIX, _channelId, _nonce)).recover(_signature);
            require(_signer == _party, "have to be signed by channel party");
        }

        _channel.lastUsedNonce = _nonce;
        _channel.loanTimelock = _timelock;

        emit LoanReturnRequested(_channelId, _timelock);
    }

    function finalizeLoanReturn(bytes32 _channelId) public {
        Channel storage _channel = channels[_channelId];
        require(_channel.loanTimelock != 0 && block.number >= _channel.loanTimelock, "loan return have to be requested and block timelock have to be in past");

        // Decrease channel balance
        uint256 _diff = (_channel.balance > _channel.loan) ? _channel.balance.sub(_channel.loan) : _channel.balance;
        _channel.balance = _channel.balance.sub(_diff);
        lockedFunds = lockedFunds.sub(_diff);

        // Return loan
        token.transfer(_channel.beneficiary, _channel.loan);
        totalLoan = totalLoan.sub(_channel.loan);
        _channel.loan = 0;
        _channel.loanTimelock = 0;

        emit LoanReturned(_channelId, _channel.beneficiary, _channel.loan);
    }

    /*
      ------------------------------------------ HELPERS ------------------------------------------
    */

    function setBeneficiary(address _party, address _newBeneficiary, uint256 _nonce, bytes memory _signature) public {
        bytes32 _channelId = getChannelId(_party);
        Channel storage _channel = channels[_channelId];

        require(isOpened(_channelId), "channel have to be opened");

        if (msg.sender != _party) {
            require(_nonce > _channel.lastUsedNonce, "nonce have to be bigger than already used");
            _channel.lastUsedNonce = _nonce;

            address _signer = keccak256(abi.encodePacked(_channelId, _newBeneficiary, _nonce)).recover(_signature);
            require(_signer == _party, "have to be signed by channel party");
        }

        _channel.beneficiary = _newBeneficiary;

        emit ChannelBeneficiaryChanged(_channelId, _newBeneficiary);
    }

    function isOpened(bytes32 _channelId) public view returns (bool) {
        return channels[_channelId].beneficiary != address(0);
    }

    // Funds not locked in any channel and free to be topuped or withdrawned
    function availableBalance() public view returns (uint256) {
        return token.balanceOf(address(this)).sub(lockedFunds);
    }

    // Returns blocknumber until which exit request should be locked
    function getTimelock() internal view returns (uint256) {
        return block.number + DELAY_BLOCKS;
    }

    function max(uint a, uint b) private pure returns (uint) {
        return a > b ? a : b;
    }

    // Setting new destination of funds recovery.
    string constant FUNDS_DESTINATION_PREFIX = "Set funds destination:";
    function setFundsDestinationByCheque(address payable _newDestination, uint256 _nonce, bytes memory _signature) public {
        require(_newDestination != address(0));

        if (msg.sender != operator) {
            require(_nonce > lastUsedNonce, "nonce have to be bigger than already used");
            lastUsedNonce = _nonce;

            address _signer = keccak256(abi.encodePacked(FUNDS_DESTINATION_PREFIX, _newDestination, _nonce)).recover(_signature);
            require(_signer == operator, "Have to be signed by proper identity");
        }

        emit DestinationChanged(fundsDestination, _newDestination);
        fundsDestination = _newDestination;
    }

}
